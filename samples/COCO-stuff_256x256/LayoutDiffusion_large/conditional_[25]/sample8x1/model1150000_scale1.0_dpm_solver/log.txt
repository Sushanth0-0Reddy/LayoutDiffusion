Logging to C:\GitHub\LayoutDiffusion\samples/COCO-stuff_256x256/LayoutDiffusion_large\conditional_[25]\sample8x1\model1150000_scale1.0_dpm_solver
current rank == 0, total_num = 1, 
, {'model': {'type': 'layout_diffusion.layout_diffusion_unet.LayoutDiffusionUNetModel', 'parameters': {'image_size': 256, 'use_fp16': True, 'use_scale_shift_norm': True, 'in_channels': 3, 'out_channels': 6, 'model_channels': 256, 'encoder_channels': 256, 'num_head_channels': 64, 'num_heads': -1, 'num_heads_upsample': -1, 'num_res_blocks': 2, 'num_attention_blocks': 1, 'resblock_updown': True, 'attention_ds': [32, 16, 8], 'channel_mult': [1, 1, 2, 2, 4, 4], 'dropout': 0.0, 'use_checkpoint': False, 'use_positional_embedding_for_attention': True, 'attention_block_type': 'ObjectAwareCrossAttention', 'layout_encoder': {'type': 'layout_diffusion.layout_encoder.LayoutTransformerEncoder', 'parameters': {'used_condition_types': ['obj_class', 'obj_bbox', 'is_valid_obj'], 'hidden_dim': 256, 'output_dim': 1024, 'num_layers': 6, 'num_heads': 8, 'use_final_ln': True, 'use_positional_embedding': False, 'resolution_to_attention': [32, 16, 8], 'use_key_padding_mask': False}}}}, 'diffusion': {'type': 'layout_diffusion.respace.SpacedDiffusion', 'parameters': {'model_var_type': 'LEARNED_RANGE', 'model_mean_type': 'EPSILON', 'diffusion_steps': 1000, 'noise_schedule': 'linear', 'learn_sigma': True, 'timestep_respacing': [1000], 'loss': ['RESCALED_MSE']}}, 'schedule_sampler': {'type': 'layout_diffusion.resample.UniformSampler'}, 'data': {'type': 'COCO-stuff', 'parameters': {'filter_mode': 'LostGAN', 'use_deprecated_stuff2017': True, 'image_size': 256, 'layout_length': 10, 'num_classes_for_layout_object': 185, 'mask_size_for_layout_object': 32, 'loader_num_workers': 4, 'include_relationships': False, 'root_dir': 'C:\\GitHub\\LayoutDiffusion\\datasets\\coco', 'instance_whitelist': None, 'stuff_whitelist': None, 'include_other': False, 'min_object_size': 0.02, 'min_objects_per_image': 3, 'max_objects_per_image': 8, 'stuff_only': True, 'used_condition_types': ['obj_class', 'obj_bbox'], 'return_origin_image': False, 'train': {'image_dir': 'images/train2017', 'instances_json': 'annotations/instances_train2017.json', 'stuff_json': 'annotations/stuff_train2017.json', 'deprecated_stuff_ids_txt': 'annotations/deprecated-challenge2017/train-ids.txt', 'max_num_samples': None, 'specific_image_ids': [], 'shuffle': True, 'batch_size': 4, 'left_right_flip': True, 'use_MinIoURandomCrop': True}, 'val': {'image_dir': 'images/val2017', 'instances_json': 'annotations/instances_val2017.json', 'stuff_json': 'annotations/stuff_val2017.json', 'deprecated_stuff_ids_txt': 'annotations/deprecated-challenge2017/val-ids.txt', 'max_num_samples': 1024, 'specific_image_ids': [], 'shuffle': False, 'batch_size': 8, 'left_right_flip': False, 'use_MinIoURandomCrop': False}, 'test': {'image_dir': 'images/val2017', 'instances_json': 'annotations/instances_val2017.json', 'stuff_json': 'annotations/stuff_val2017.json', 'deprecated_stuff_ids_txt': 'annotations/deprecated-challenge2017/val-ids.txt', 'max_num_samples': 8, 'specific_image_ids': [], 'shuffle': False, 'batch_size': 4, 'left_right_flip': False, 'use_MinIoURandomCrop': False}}}, 'train': {'pretrained_model_path': './pretrained_models/COCO-stuff_256x256_LayoutDiffusion_large_ema_1150000.pt', 'resume_checkpoint': '', 'classifier_free': True, 'classifier_free_dropout': 0.2, 'lr': 1e-05, 'ema_rate': '0.9999', 'micro_batch_size': 1, 'save_interval': 10000, 'log_interval': 1000, 'log_dir': './log/COCO-stuff_256x256/LayoutDiffusion_large', 'use_fp16': True, 'fp16_scale_growth': 0.001, 'weight_decay': 0.0, 'lr_anneal_steps': 0, 'find_unused_parameters': False, 'only_update_parameters_that_require_grad': False}, 'sample': {'fix_seed': False, 'use_fp16': True, 'log_root': 'C:\\GitHub\\LayoutDiffusion\\samples/COCO-stuff_256x256/LayoutDiffusion_large', 'sample_suffix': 'model1150000_scale1.0_dpm_solver', 'pretrained_model_path': './pretrained_models/COCO-stuff_256x256_LayoutDiffusion_large_ema_1150000.pt', 'classifier_free': True, 'classifier_free_scale': 1.0, 'sample_times': 1, 'timestep_respacing': [25], 'sample_method': 'dpm_solver', 'clip_denoised': True, 'save_cropped_images': True, 'save_images_with_bboxs': True, 'save_sequence_of_obj_imgs': True, 'adaptive_step_size': False, 'rtol': 0.05, 'fast_version': True, 'eps': 0.0001}, 'local_rank': 0, 'config_file': './configs/COCO-stuff_256x256/LayoutDiffusion_large.yaml'}
model:
  type: layout_diffusion.layout_diffusion_unet.LayoutDiffusionUNetModel
  parameters:
    image_size: 256
    use_fp16: true
    use_scale_shift_norm: true
    in_channels: 3
    out_channels: 6
    model_channels: 256
    encoder_channels: 256
    num_head_channels: 64
    num_heads: -1
    num_heads_upsample: -1
    num_res_blocks: 2
    num_attention_blocks: 1
    resblock_updown: true
    attention_ds:
    - 32
    - 16
    - 8
    channel_mult:
    - 1
    - 1
    - 2
    - 2
    - 4
    - 4
    dropout: 0.0
    use_checkpoint: false
    use_positional_embedding_for_attention: true
    attention_block_type: ObjectAwareCrossAttention
    layout_encoder:
      type: layout_diffusion.layout_encoder.LayoutTransformerEncoder
      parameters:
        used_condition_types:
        - obj_class
        - obj_bbox
        - is_valid_obj
        hidden_dim: 256
        output_dim: 1024
        num_layers: 6
        num_heads: 8
        use_final_ln: true
        use_positional_embedding: false
        resolution_to_attention:
        - 32
        - 16
        - 8
        use_key_padding_mask: false
diffusion:
  type: layout_diffusion.respace.SpacedDiffusion
  parameters:
    model_var_type: LEARNED_RANGE
    model_mean_type: EPSILON
    diffusion_steps: 1000
    noise_schedule: linear
    learn_sigma: true
    timestep_respacing:
    - 1000
    loss:
    - RESCALED_MSE
schedule_sampler:
  type: layout_diffusion.resample.UniformSampler
data:
  type: COCO-stuff
  parameters:
    filter_mode: LostGAN
    use_deprecated_stuff2017: true
    image_size: 256
    layout_length: 10
    num_classes_for_layout_object: 185
    mask_size_for_layout_object: 32
    loader_num_workers: 4
    include_relationships: false
    root_dir: C:\GitHub\LayoutDiffusion\datasets\coco
    instance_whitelist: null
    stuff_whitelist: null
    include_other: false
    min_object_size: 0.02
    min_objects_per_image: 3
    max_objects_per_image: 8
    stuff_only: true
    used_condition_types:
    - obj_class
    - obj_bbox
    return_origin_image: false
    train:
      image_dir: images/train2017
      instances_json: annotations/instances_train2017.json
      stuff_json: annotations/stuff_train2017.json
      deprecated_stuff_ids_txt: annotations/deprecated-challenge2017/train-ids.txt
      max_num_samples: null
      specific_image_ids: []
      shuffle: true
      batch_size: 4
      left_right_flip: true
      use_MinIoURandomCrop: true
    val:
      image_dir: images/val2017
      instances_json: annotations/instances_val2017.json
      stuff_json: annotations/stuff_val2017.json
      deprecated_stuff_ids_txt: annotations/deprecated-challenge2017/val-ids.txt
      max_num_samples: 1024
      specific_image_ids: []
      shuffle: false
      batch_size: 8
      left_right_flip: false
      use_MinIoURandomCrop: false
    test:
      image_dir: images/val2017
      instances_json: annotations/instances_val2017.json
      stuff_json: annotations/stuff_val2017.json
      deprecated_stuff_ids_txt: annotations/deprecated-challenge2017/val-ids.txt
      max_num_samples: 8
      specific_image_ids: []
      shuffle: false
      batch_size: 4
      left_right_flip: false
      use_MinIoURandomCrop: false
train:
  pretrained_model_path: ./pretrained_models/COCO-stuff_256x256_LayoutDiffusion_large_ema_1150000.pt
  resume_checkpoint: ''
  classifier_free: true
  classifier_free_dropout: 0.2
  lr: 1.0e-05
  ema_rate: '0.9999'
  micro_batch_size: 1
  save_interval: 10000
  log_interval: 1000
  log_dir: ./log/COCO-stuff_256x256/LayoutDiffusion_large
  use_fp16: true
  fp16_scale_growth: 0.001
  weight_decay: 0.0
  lr_anneal_steps: 0
  find_unused_parameters: false
  only_update_parameters_that_require_grad: false
sample:
  fix_seed: false
  use_fp16: true
  log_root: C:\GitHub\LayoutDiffusion\samples/COCO-stuff_256x256/LayoutDiffusion_large
  sample_suffix: model1150000_scale1.0_dpm_solver
  pretrained_model_path: ./pretrained_models/COCO-stuff_256x256_LayoutDiffusion_large_ema_1150000.pt
  classifier_free: true
  classifier_free_scale: 1.0
  sample_times: 1
  timestep_respacing:
  - 25
  sample_method: dpm_solver
  clip_denoised: true
  save_cropped_images: true
  save_images_with_bboxs: true
  save_sequence_of_obj_imgs: true
  adaptive_step_size: false
  rtol: 0.05
  fast_version: true
  eps: 0.0001
local_rank: 0
config_file: ./configs/COCO-stuff_256x256/LayoutDiffusion_large.yaml

creating model...
LayoutDiffusionUNetModel(
  (layout_encoder): LayoutTransformerEncoder(
    (transform): Transformer(
      (resblocks): ModuleList(
        (0): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (c_qkv): Linear(in_features=256, out_features=768, bias=True)
            (c_proj): Linear(in_features=256, out_features=256, bias=True)
            (attention): QKVMultiheadAttention()
          )
          (ln_1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (mlp): MLP(
            (c_fc): Linear(in_features=256, out_features=1024, bias=True)
            (c_proj): Linear(in_features=1024, out_features=256, bias=True)
            (gelu): GELU()
          )
          (ln_2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (1): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (c_qkv): Linear(in_features=256, out_features=768, bias=True)
            (c_proj): Linear(in_features=256, out_features=256, bias=True)
            (attention): QKVMultiheadAttention()
          )
          (ln_1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (mlp): MLP(
            (c_fc): Linear(in_features=256, out_features=1024, bias=True)
            (c_proj): Linear(in_features=1024, out_features=256, bias=True)
            (gelu): GELU()
          )
          (ln_2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (c_qkv): Linear(in_features=256, out_features=768, bias=True)
            (c_proj): Linear(in_features=256, out_features=256, bias=True)
            (attention): QKVMultiheadAttention()
          )
          (ln_1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (mlp): MLP(
            (c_fc): Linear(in_features=256, out_features=1024, bias=True)
            (c_proj): Linear(in_features=1024, out_features=256, bias=True)
            (gelu): GELU()
          )
          (ln_2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (3): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (c_qkv): Linear(in_features=256, out_features=768, bias=True)
            (c_proj): Linear(in_features=256, out_features=256, bias=True)
            (attention): QKVMultiheadAttention()
          )
          (ln_1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (mlp): MLP(
            (c_fc): Linear(in_features=256, out_features=1024, bias=True)
            (c_proj): Linear(in_features=1024, out_features=256, bias=True)
            (gelu): GELU()
          )
          (ln_2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (4): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (c_qkv): Linear(in_features=256, out_features=768, bias=True)
            (c_proj): Linear(in_features=256, out_features=256, bias=True)
            (attention): QKVMultiheadAttention()
          )
          (ln_1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (mlp): MLP(
            (c_fc): Linear(in_features=256, out_features=1024, bias=True)
            (c_proj): Linear(in_features=1024, out_features=256, bias=True)
            (gelu): GELU()
          )
          (ln_2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (5): ResidualAttentionBlock(
          (attn): MultiheadAttention(
            (c_qkv): Linear(in_features=256, out_features=768, bias=True)
            (c_proj): Linear(in_features=256, out_features=256, bias=True)
            (attention): QKVMultiheadAttention()
          )
          (ln_1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (mlp): MLP(
            (c_fc): Linear(in_features=256, out_features=1024, bias=True)
            (c_proj): Linear(in_features=1024, out_features=256, bias=True)
            (gelu): GELU()
          )
          (ln_2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
      )
    )
    (transformer_proj): Linear(in_features=256, out_features=1024, bias=True)
    (obj_class_embedding): Embedding(185, 256)
    (obj_bbox_embedding): Linear(in_features=4, out_features=256, bias=True)
    (final_ln): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
  )
  (time_embed): Sequential(
    (0): Linear(in_features=256, out_features=1024, bias=True)
    (1): SiLU()
    (2): Linear(in_features=1024, out_features=1024, bias=True)
  )
  (input_blocks): ModuleList(
    (0): TimestepEmbedSequential(
      (0): Conv2d(3, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
    )
    (1): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=512, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Identity()
      )
    )
    (2): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=512, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Identity()
      )
    )
    (3): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Downsample(
          (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
        (x_upd): Downsample(
          (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=512, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Identity()
      )
    )
    (4): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=512, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Identity()
      )
    )
    (5): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=512, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Identity()
      )
    )
    (6): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Downsample(
          (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
        (x_upd): Downsample(
          (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=512, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Identity()
      )
    )
    (7): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (8): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Identity()
      )
    )
    (9): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Downsample(
          (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
        (x_upd): Downsample(
          (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Identity()
      )
    )
    (10): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Identity()
      )
      (1): ObjectAwareCrossAttention(
        (qkv_projector): Conv1d(512, 1536, kernel_size=(1,), stride=(1,))
        (norm_for_qkv): GroupNorm32(32, 512, eps=1e-05, affine=True)
        (layout_content_embedding_projector): Conv1d(256, 1024, kernel_size=(1,), stride=(1,))
        (layout_position_embedding_projector): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        (norm_for_obj_class_embedding): GroupNorm32(32, 256, eps=1e-05, affine=True)
        (norm_for_layout_positional_embedding): GroupNorm32(32, 512, eps=1e-05, affine=True)
        (norm_for_image_patch_positional_embedding): GroupNorm32(32, 512, eps=1e-05, affine=True)
        (proj_out): Conv1d(512, 512, kernel_size=(1,), stride=(1,))
      )
    )
    (11): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Identity()
      )
      (1): ObjectAwareCrossAttention(
        (qkv_projector): Conv1d(512, 1536, kernel_size=(1,), stride=(1,))
        (norm_for_qkv): GroupNorm32(32, 512, eps=1e-05, affine=True)
        (layout_content_embedding_projector): Conv1d(256, 1024, kernel_size=(1,), stride=(1,))
        (layout_position_embedding_projector): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        (norm_for_obj_class_embedding): GroupNorm32(32, 256, eps=1e-05, affine=True)
        (norm_for_layout_positional_embedding): GroupNorm32(32, 512, eps=1e-05, affine=True)
        (norm_for_image_patch_positional_embedding): GroupNorm32(32, 512, eps=1e-05, affine=True)
        (proj_out): Conv1d(512, 512, kernel_size=(1,), stride=(1,))
      )
    )
    (12): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Downsample(
          (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
        (x_upd): Downsample(
          (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Identity()
      )
    )
    (13): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(512, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=2048, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): ObjectAwareCrossAttention(
        (qkv_projector): Conv1d(1024, 3072, kernel_size=(1,), stride=(1,))
        (norm_for_qkv): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (layout_content_embedding_projector): Conv1d(256, 2048, kernel_size=(1,), stride=(1,))
        (layout_position_embedding_projector): Conv1d(256, 1024, kernel_size=(1,), stride=(1,))
        (norm_for_obj_class_embedding): GroupNorm32(32, 256, eps=1e-05, affine=True)
        (norm_for_layout_positional_embedding): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (norm_for_image_patch_positional_embedding): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (proj_out): Conv1d(1024, 1024, kernel_size=(1,), stride=(1,))
      )
    )
    (14): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=2048, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Identity()
      )
      (1): ObjectAwareCrossAttention(
        (qkv_projector): Conv1d(1024, 3072, kernel_size=(1,), stride=(1,))
        (norm_for_qkv): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (layout_content_embedding_projector): Conv1d(256, 2048, kernel_size=(1,), stride=(1,))
        (layout_position_embedding_projector): Conv1d(256, 1024, kernel_size=(1,), stride=(1,))
        (norm_for_obj_class_embedding): GroupNorm32(32, 256, eps=1e-05, affine=True)
        (norm_for_layout_positional_embedding): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (norm_for_image_patch_positional_embedding): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (proj_out): Conv1d(1024, 1024, kernel_size=(1,), stride=(1,))
      )
    )
    (15): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Downsample(
          (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
        (x_upd): Downsample(
          (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
        )
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=2048, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Identity()
      )
    )
    (16): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=2048, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Identity()
      )
      (1): ObjectAwareCrossAttention(
        (qkv_projector): Conv1d(1024, 3072, kernel_size=(1,), stride=(1,))
        (norm_for_qkv): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (layout_content_embedding_projector): Conv1d(256, 2048, kernel_size=(1,), stride=(1,))
        (layout_position_embedding_projector): Conv1d(256, 1024, kernel_size=(1,), stride=(1,))
        (norm_for_obj_class_embedding): GroupNorm32(32, 256, eps=1e-05, affine=True)
        (norm_for_layout_positional_embedding): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (norm_for_image_patch_positional_embedding): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (proj_out): Conv1d(1024, 1024, kernel_size=(1,), stride=(1,))
      )
    )
    (17): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=2048, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Identity()
      )
      (1): ObjectAwareCrossAttention(
        (qkv_projector): Conv1d(1024, 3072, kernel_size=(1,), stride=(1,))
        (norm_for_qkv): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (layout_content_embedding_projector): Conv1d(256, 2048, kernel_size=(1,), stride=(1,))
        (layout_position_embedding_projector): Conv1d(256, 1024, kernel_size=(1,), stride=(1,))
        (norm_for_obj_class_embedding): GroupNorm32(32, 256, eps=1e-05, affine=True)
        (norm_for_layout_positional_embedding): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (norm_for_image_patch_positional_embedding): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (proj_out): Conv1d(1024, 1024, kernel_size=(1,), stride=(1,))
      )
    )
  )
  (middle_block): TimestepEmbedSequential(
    (0): ResBlock(
      (in_layers): Sequential(
        (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (1): SiLU()
        (2): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (h_upd): Identity()
      (x_upd): Identity()
      (emb_layers): Sequential(
        (0): SiLU()
        (1): Linear(in_features=1024, out_features=2048, bias=True)
      )
      (out_layers): Sequential(
        (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (1): SiLU()
        (2): Dropout(p=0.0, inplace=False)
        (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (skip_connection): Identity()
    )
    (1): ObjectAwareCrossAttention(
      (qkv_projector): Conv1d(1024, 3072, kernel_size=(1,), stride=(1,))
      (norm_for_qkv): GroupNorm32(32, 1024, eps=1e-05, affine=True)
      (layout_content_embedding_projector): Conv1d(256, 2048, kernel_size=(1,), stride=(1,))
      (layout_position_embedding_projector): Conv1d(256, 1024, kernel_size=(1,), stride=(1,))
      (norm_for_obj_class_embedding): GroupNorm32(32, 256, eps=1e-05, affine=True)
      (norm_for_layout_positional_embedding): GroupNorm32(32, 1024, eps=1e-05, affine=True)
      (norm_for_image_patch_positional_embedding): GroupNorm32(32, 1024, eps=1e-05, affine=True)
      (proj_out): Conv1d(1024, 1024, kernel_size=(1,), stride=(1,))
    )
    (2): ResBlock(
      (in_layers): Sequential(
        (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (1): SiLU()
        (2): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (h_upd): Identity()
      (x_upd): Identity()
      (emb_layers): Sequential(
        (0): SiLU()
        (1): Linear(in_features=1024, out_features=2048, bias=True)
      )
      (out_layers): Sequential(
        (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (1): SiLU()
        (2): Dropout(p=0.0, inplace=False)
        (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (skip_connection): Identity()
    )
  )
  (output_blocks): ModuleList(
    (0): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 2048, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=2048, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): ObjectAwareCrossAttention(
        (qkv_projector): Conv1d(1024, 3072, kernel_size=(1,), stride=(1,))
        (norm_for_qkv): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (layout_content_embedding_projector): Conv1d(256, 2048, kernel_size=(1,), stride=(1,))
        (layout_position_embedding_projector): Conv1d(256, 1024, kernel_size=(1,), stride=(1,))
        (norm_for_obj_class_embedding): GroupNorm32(32, 256, eps=1e-05, affine=True)
        (norm_for_layout_positional_embedding): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (norm_for_image_patch_positional_embedding): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (proj_out): Conv1d(1024, 1024, kernel_size=(1,), stride=(1,))
      )
    )
    (1): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 2048, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=2048, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): ObjectAwareCrossAttention(
        (qkv_projector): Conv1d(1024, 3072, kernel_size=(1,), stride=(1,))
        (norm_for_qkv): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (layout_content_embedding_projector): Conv1d(256, 2048, kernel_size=(1,), stride=(1,))
        (layout_position_embedding_projector): Conv1d(256, 1024, kernel_size=(1,), stride=(1,))
        (norm_for_obj_class_embedding): GroupNorm32(32, 256, eps=1e-05, affine=True)
        (norm_for_layout_positional_embedding): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (norm_for_image_patch_positional_embedding): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (proj_out): Conv1d(1024, 1024, kernel_size=(1,), stride=(1,))
      )
    )
    (2): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 2048, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=2048, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): ObjectAwareCrossAttention(
        (qkv_projector): Conv1d(1024, 3072, kernel_size=(1,), stride=(1,))
        (norm_for_qkv): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (layout_content_embedding_projector): Conv1d(256, 2048, kernel_size=(1,), stride=(1,))
        (layout_position_embedding_projector): Conv1d(256, 1024, kernel_size=(1,), stride=(1,))
        (norm_for_obj_class_embedding): GroupNorm32(32, 256, eps=1e-05, affine=True)
        (norm_for_layout_positional_embedding): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (norm_for_image_patch_positional_embedding): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (proj_out): Conv1d(1024, 1024, kernel_size=(1,), stride=(1,))
      )
      (2): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Upsample()
        (x_upd): Upsample()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=2048, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Identity()
      )
    )
    (3): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 2048, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=2048, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): ObjectAwareCrossAttention(
        (qkv_projector): Conv1d(1024, 3072, kernel_size=(1,), stride=(1,))
        (norm_for_qkv): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (layout_content_embedding_projector): Conv1d(256, 2048, kernel_size=(1,), stride=(1,))
        (layout_position_embedding_projector): Conv1d(256, 1024, kernel_size=(1,), stride=(1,))
        (norm_for_obj_class_embedding): GroupNorm32(32, 256, eps=1e-05, affine=True)
        (norm_for_layout_positional_embedding): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (norm_for_image_patch_positional_embedding): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (proj_out): Conv1d(1024, 1024, kernel_size=(1,), stride=(1,))
      )
    )
    (4): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 2048, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(2048, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=2048, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): ObjectAwareCrossAttention(
        (qkv_projector): Conv1d(1024, 3072, kernel_size=(1,), stride=(1,))
        (norm_for_qkv): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (layout_content_embedding_projector): Conv1d(256, 2048, kernel_size=(1,), stride=(1,))
        (layout_position_embedding_projector): Conv1d(256, 1024, kernel_size=(1,), stride=(1,))
        (norm_for_obj_class_embedding): GroupNorm32(32, 256, eps=1e-05, affine=True)
        (norm_for_layout_positional_embedding): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (norm_for_image_patch_positional_embedding): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (proj_out): Conv1d(1024, 1024, kernel_size=(1,), stride=(1,))
      )
    )
    (5): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 1536, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(1536, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=2048, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Conv2d(1536, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): ObjectAwareCrossAttention(
        (qkv_projector): Conv1d(1024, 3072, kernel_size=(1,), stride=(1,))
        (norm_for_qkv): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (layout_content_embedding_projector): Conv1d(256, 2048, kernel_size=(1,), stride=(1,))
        (layout_position_embedding_projector): Conv1d(256, 1024, kernel_size=(1,), stride=(1,))
        (norm_for_obj_class_embedding): GroupNorm32(32, 256, eps=1e-05, affine=True)
        (norm_for_layout_positional_embedding): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (norm_for_image_patch_positional_embedding): GroupNorm32(32, 1024, eps=1e-05, affine=True)
        (proj_out): Conv1d(1024, 1024, kernel_size=(1,), stride=(1,))
      )
      (2): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Upsample()
        (x_upd): Upsample()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=2048, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Identity()
      )
    )
    (6): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 1536, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(1536, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Conv2d(1536, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): ObjectAwareCrossAttention(
        (qkv_projector): Conv1d(512, 1536, kernel_size=(1,), stride=(1,))
        (norm_for_qkv): GroupNorm32(32, 512, eps=1e-05, affine=True)
        (layout_content_embedding_projector): Conv1d(256, 1024, kernel_size=(1,), stride=(1,))
        (layout_position_embedding_projector): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        (norm_for_obj_class_embedding): GroupNorm32(32, 256, eps=1e-05, affine=True)
        (norm_for_layout_positional_embedding): GroupNorm32(32, 512, eps=1e-05, affine=True)
        (norm_for_image_patch_positional_embedding): GroupNorm32(32, 512, eps=1e-05, affine=True)
        (proj_out): Conv1d(512, 512, kernel_size=(1,), stride=(1,))
      )
    )
    (7): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): ObjectAwareCrossAttention(
        (qkv_projector): Conv1d(512, 1536, kernel_size=(1,), stride=(1,))
        (norm_for_qkv): GroupNorm32(32, 512, eps=1e-05, affine=True)
        (layout_content_embedding_projector): Conv1d(256, 1024, kernel_size=(1,), stride=(1,))
        (layout_position_embedding_projector): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        (norm_for_obj_class_embedding): GroupNorm32(32, 256, eps=1e-05, affine=True)
        (norm_for_layout_positional_embedding): GroupNorm32(32, 512, eps=1e-05, affine=True)
        (norm_for_image_patch_positional_embedding): GroupNorm32(32, 512, eps=1e-05, affine=True)
        (proj_out): Conv1d(512, 512, kernel_size=(1,), stride=(1,))
      )
    )
    (8): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): ObjectAwareCrossAttention(
        (qkv_projector): Conv1d(512, 1536, kernel_size=(1,), stride=(1,))
        (norm_for_qkv): GroupNorm32(32, 512, eps=1e-05, affine=True)
        (layout_content_embedding_projector): Conv1d(256, 1024, kernel_size=(1,), stride=(1,))
        (layout_position_embedding_projector): Conv1d(256, 512, kernel_size=(1,), stride=(1,))
        (norm_for_obj_class_embedding): GroupNorm32(32, 256, eps=1e-05, affine=True)
        (norm_for_layout_positional_embedding): GroupNorm32(32, 512, eps=1e-05, affine=True)
        (norm_for_image_patch_positional_embedding): GroupNorm32(32, 512, eps=1e-05, affine=True)
        (proj_out): Conv1d(512, 512, kernel_size=(1,), stride=(1,))
      )
      (2): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Upsample()
        (x_upd): Upsample()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Identity()
      )
    )
    (9): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (10): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (11): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 768, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(768, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Upsample()
        (x_upd): Upsample()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=1024, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Identity()
      )
    )
    (12): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 768, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(768, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=512, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (13): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=512, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (14): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=512, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Upsample()
        (x_upd): Upsample()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=512, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Identity()
      )
    )
    (15): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=512, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (16): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=512, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (17): TimestepEmbedSequential(
      (0): ResBlock(
        (in_layers): Sequential(
          (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (h_upd): Identity()
        (x_upd): Identity()
        (emb_layers): Sequential(
          (0): SiLU()
          (1): Linear(in_features=1024, out_features=512, bias=True)
        )
        (out_layers): Sequential(
          (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Dropout(p=0.0, inplace=False)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (skip_connection): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
  )
  (out): Sequential(
    (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
    (1): SiLU()
    (2): Conv2d(256, 6, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
  )
)
loading model from ./pretrained_models/COCO-stuff_256x256_LayoutDiffusion_large_ema_1150000.pt
successfully load the entire model
creating diffusion...
sample method = dpm_solver
sampling...
FPS = 4 / 65.61494469642639 = 0.06096172173132767 imgs / second
batch_id=1 created 4 / 8 samples
FPS = 8 / 109.77942514419556 = 0.07287340036160674 imgs / second
batch_id=2 created 8 / 8 samples
sampling complete
